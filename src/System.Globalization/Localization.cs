using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Web.Mvc;

namespace System.Globalization
{
	/// <summary>
	/// Holds all the information necessary to Localize the site into a single language.
	/// </summary>
	/// <created author="laurentiu.macovei" date="Tue, 29 Nov 2011 12:58:40 GMT"/>
	public class Localization
	{
		/// <summary>A list of translated messages</summary>
		/// <created author="laurentiu.macovei" date="Tue, 29 Nov 2011 12:58:41 GMT"/>
		public SortedDictionary<string, Message> Messages { get; set; }

		/// <summary>
		/// Translated messages, indexed by a short, autogenerated ID.
		/// Used during .po editing to avoid needing to pass around giant string keys.
		/// </summary>
		/// <created author="laurentiu.macovei" date="Tue, 29 Nov 2011 12:58:41 GMT"/>
		public SortedDictionary<int, Message> MessagesByAutoID { get; set; }

		/// <summary>
		/// Whether comment information should be loaded and stored in memory for this Localization.
		/// Generally only used if you plan to use this Localization object to edit and save to a .po file.
		/// </summary>
		/// <created author="laurentiu.macovei" date="Tue, 29 Nov 2011 12:58:41 GMT"/>
		public bool LoadComments { get; set; }

		/// <summary>Creates a new, empty, Localization</summary>
		/// <created author="laurentiu.macovei" date="Tue, 29 Nov 2011 12:58:41 GMT"/>
		public Localization()
		{
			Messages = new SortedDictionary<string, Message>();
			MessagesByAutoID = new SortedDictionary<int, Message>();
            LoadComments = LocalizationAppConfig.LocalizationLoadComments;
		}

		/// <summary>Creates a new Localization, populated from a .po file at the supplied filePath</summary>
		/// <param name="filePath"></param>
		/// <created author="laurentiu.macovei" date="Tue, 29 Nov 2011 12:58:41 GMT"/>
		public Localization(string filePath)
			: this()
		{
			LoadFromFile(filePath);
		}

		/// <summary>
		/// Creates a new Localization, populated from a .po file at the supplied filePath.
		/// If requested, will also load comments from that file.
		/// </summary>
		/// <param name="filePath"></param>
		/// <param name="loadComments">If true, will populate comments so that this .po file can be saved again exactly as it was loaded.</param>
		/// <created author="laurentiu.macovei" date="Tue, 29 Nov 2011 12:58:41 GMT"/>
		public Localization(string filePath, bool loadComments)
			: this()
		{
			LoadComments = loadComments;
			LoadFromFile(filePath);
		}

		/// <summary>
		/// Add Localization messages from a .po file.
		/// Doesn't initialize the collection, so it can be called from
		/// a loop if needed.
		/// </summary>
		/// <param name="filepath"></param>
		/// <created author="laurentiu.macovei" date="Tue, 29 Nov 2011 12:58:42 GMT"/>
		public void LoadFromFile(string filepath)
		{
			LoadFromReader(new StreamReader(filepath, Encoding.UTF8, true));
		}
		private enum NodeType
		{
			WhiteSpace,
			TranslatorComment,
			ExtractedComment,
			Reference,
			Flag,
			PreviousUntranslatedString,
			MsgID,
			MsgID_Plural,
			MsgStr,
			MsgStrWithBrakets,
			MsgStr_Plural,
			Continued,
			Ignore
		}
		/// <summary>
		/// Add Localization messages from the specified TextReader 
		/// (which hopefully points at a .po file)
		/// Doesn't initialize the collection, so it can be called from
		/// a loop if needed.
		/// </summary>
		/// <param name="reader"></param>
		/// <created author="laurentiu.macovei" date="Tue, 29 Nov 2011 12:58:42 GMT"/>
		public void LoadFromReader(TextReader reader)
		{
			string line;
			Message message = new Message();
			NodeType lastNode = NodeType.WhiteSpace;
			while (null != (line = reader.ReadLine()))
			{
				if (String.IsNullOrEmpty(line))
				{
					// new message block
					if (message.MsgID != "")
					{
						if (!Messages.ContainsKey(message.MsgID))
						{
							Messages.Add(message.MsgID, message);
						}
						if (!MessagesByAutoID.ContainsKey(message.AutoID))
						{
							MessagesByAutoID.Add(message.AutoID, message);
						}
					}
					message = new Message();
					continue;
				}
				NodeType node = GetNodeType(line);

				switch (node)
				{
					case NodeType.TranslatorComment:
						if (LoadComments)
							message.TranslatorComments.Add(line.Substring(1));
						break;
					case NodeType.ExtractedComment:
						if (LoadComments)
                            message.ExtractedComments.Add(line.Substring(2));
						break;
					case NodeType.Reference:
						if (LoadComments)
							message.Contexts.Add(line.Substring(2).Trim());
						break;
					case NodeType.Flag:
						//flags are ignored for now
						//if (LoadComments)
						//    message.Comments.Add(line.Substring(2).Trim());
						break;
					case NodeType.PreviousUntranslatedString:
						//previous untranslated strings are ingored for now
						break;
					case NodeType.MsgID:
						message.MsgID = Unescape(line.Substring(6));
						lastNode = node;
						break;
					case NodeType.MsgID_Plural:
						message.MsgID_Plural = Unescape(line.Substring(13));
						lastNode = node;
						break;
					case NodeType.MsgStr:
						message.MsgStr = Unescape(line.Substring(7));
						lastNode = node;
						break;
					case NodeType.MsgStrWithBrakets:
						message.MsgStr = Unescape(line.Substring(10));
						lastNode = node;
						break;
					case NodeType.MsgStr_Plural:
						message.MsgStr_Plural = Unescape(line.Substring(10));
						lastNode = node;
						break;
					case NodeType.Continued:
						//if (!string.IsNullOrEmpty(message.MsgID))
							switch (lastNode)
							{

								case NodeType.MsgID:
									message.MsgID += Unescape(line);
									break;
								case NodeType.MsgID_Plural:
									message.MsgID_Plural += Unescape(line);
									break;
								case NodeType.MsgStr:
								case NodeType.MsgStrWithBrakets:
									message.MsgStr += Unescape(line);
									break;
								case NodeType.MsgStr_Plural:
									message.MsgStr_Plural += Unescape(line);
									break;
							}
						break;
					case NodeType.WhiteSpace:
					default:
						break;
				}
			}
			// put away the last one
			if (message.MsgID != "")
			{
				Messages.Add(message.MsgID, message);
				MessagesByAutoID.Add(message.AutoID, message);
				message = new Message();
			}
			reader.Close();

		}

		/// <summary>
		/// </summary>
		/// <param name="line"></param>
		/// <returns></returns>
		/// <created author="laurentiu.macovei" date="Tue, 29 Nov 2011 12:58:42 GMT"/>
		private static NodeType GetNodeType(string line)
		{
			NodeType node = NodeType.WhiteSpace;
			if (line.StartsWith("msgid"))
			{
				node = NodeType.MsgID;
				if (line.StartsWith("msgid_plural"))
					node = NodeType.MsgID_Plural;
			}
			else if (line.StartsWith("msgstr"))
			{
				node = NodeType.MsgStr;
				if (line.StartsWith("msgstr[0] "))
					node = NodeType.MsgStrWithBrakets;
				else if (line.StartsWith("msgstr[1] "))
					node = NodeType.MsgStr_Plural;
				else if (line.StartsWith("msgstr["))
					node = NodeType.Ignore;
			}
			else if (line.StartsWith("#"))
			{
				node = NodeType.TranslatorComment;
				if (line.StartsWith("#."))
					node = NodeType.ExtractedComment;
				else if (line.StartsWith("#:"))
					node = NodeType.Reference;
				else if (line.StartsWith("#,"))
					node = NodeType.Flag;
				else if (line.StartsWith("#|"))
					node = NodeType.PreviousUntranslatedString;
			}
			else if (line.StartsWith("\""))
			{
				node = NodeType.Continued;
			}
			return node;
		}
		/// <summary>
		/// </summary>
		/// <param name="text"></param>
		/// <returns></returns>
		/// <created author="laurentiu.macovei" date="Tue, 29 Nov 2011 12:58:42 GMT"/>
		protected virtual string Unescape(string text)
		{
			return text.Trim('"')
				.Replace("\\n", "\n")
				.Replace("\\\"", "\"")
				;
		}

		/// <summary>
		/// Given a msgID, returns the associated msgStr.
		/// If msgID doesn't exist in this collection, returns msgID.
		/// If the associated msgStr is empty, returns msgID.
		/// </summary>
		/// <param name="msgID"></param>
		/// <returns></returns>
		/// <created author="laurentiu.macovei" date="Tue, 29 Nov 2011 12:58:42 GMT"/>
		public string GetMessage(string msgID)
		{
			Message message;
			if (!Messages.TryGetValue(msgID, out message))
			{
				return msgID;
			}

			return String.IsNullOrEmpty(message.MsgStr) ? msgID : message.MsgStr;
		}

		/// <summary>
		/// Given a msgID, returns the associated msgStr.
		/// If msgID doesn't exist in this collection, returns msgID.
		/// If the associated msgStr is empty, returns msgID.
		/// </summary>
		/// <param name="msgID"></param>
		/// <returns></returns>
		/// <created author="laurentiu.macovei" date="Tue, 29 Nov 2011 12:58:42 GMT"/>
		public Message GetMessageObject(string msgID)
		{
			if (msgID == null)
				return null;
			Message message;
			if (!Messages.TryGetValue(msgID, out message))
				return new Message { MsgID = msgID };
			return message;
		}

		/// <summary>Writes the contents of this Localization to the specified .po file.</summary>
		/// <param name="filepath"></param>
		/// <created author="laurentiu.macovei" date="Tue, 29 Nov 2011 12:58:42 GMT"/>
		public void ToFile(string filepath)
		{
			using (StreamWriter writer = new StreamWriter(filepath, false))
			{
				foreach (Message msg in Messages.Values)
				{
					writer.Write(msg.ToPOBlock());
				}
				writer.Close();
			}

		}
	}
}
